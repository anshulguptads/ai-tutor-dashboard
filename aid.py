# -*- coding: utf-8 -*-
"""aid

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19SDXdVpWDB8e0-Cy_G1gZfuVTijudJQs
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px

# Load datasets
students_df = pd.read_csv('synthetic_students.csv')
student_units_df = pd.read_csv('synthetic_student_units.csv', parse_dates=['ai_tutor_last_access'])
faculty_df = pd.read_csv('synthetic_faculty.csv')
faculty_units_df = pd.read_csv('synthetic_faculty_units.csv', parse_dates=['session_date'])
management_df = pd.read_csv('synthetic_management_snapshot.csv')

st.set_page_config(page_title="AI Tutor Analytics Platform", layout="wide")
st.title("üéì AI Tutor Analytics Platform")
st.markdown("##### Visualizing Impact & Engagement for Students, Faculty, and Senior Management")

menu = st.sidebar.radio(
    "Choose Dashboard",
    ("Student Dashboard", "Faculty Dashboard", "Senior Management Dashboard")
)

# -------------- STUDENT DASHBOARD --------------
if menu == "Student Dashboard":
    st.header("üë©‚Äçüéì Student Dashboard")
    st.markdown("**View your learning journey, compare with your class, and access AI tools**")
    student_id = st.selectbox(
        "Select Student",
        sorted(students_df['student_id'].unique()),
        format_func=lambda x: students_df[students_df['student_id']==x]['name'].iloc[0]
    )
    student = students_df[students_df['student_id'] == student_id].iloc[0]
    st.subheader(f"Welcome, {student['name']} ({student['program']}, {student['cohort']})")

    student_units = student_units_df[student_units_df['student_id'] == student_id]
    cohort_students = students_df[
        (students_df['program'] == student['program']) &
        (students_df['cohort'] == student['cohort'])
    ]
    # ---- Tool Usage & Badges ----
    st.markdown("##### üü£ Tool Usage & Badges")
    col1, col2, col3, col4 = st.columns(4)
    col1.metric("AI Tutor Days", int(student_units['ai_tutor_usage_days'].sum()))
    col2.metric("AI Mentor Days", int(student_units['ai_mentor_usage_days'].sum()))
    col3.metric("Exam Prep Days", int(student_units['exam_prep_usage_days'].sum()))
    col4.metric("Sessions Attended", int(student_units['sessions_attended'].sum()))
    st.markdown(f"**Last AI Tutor Access:** {student_units['ai_tutor_last_access'].max().strftime('%Y-%m-%d')}")
    st.markdown(f"**Badges Earned:** {', '.join(set([b for b in student_units['badges_earned'] if pd.notnull(b) and b]))}")

    # ---- Leaderboard Position (Program & Cohort Rank) ----
    st.markdown("##### üèÖ Leaderboard Position")
    overall = student_units_df.groupby('student_id')['trs_score'].mean().reset_index()
    overall['program'] = overall['student_id'].map(students_df.set_index('student_id')['program'])
    overall['cohort'] = overall['student_id'].map(students_df.set_index('student_id')['cohort'])

    # Program rank
    program_overall = overall[overall['program'] == student['program']].sort_values('trs_score', ascending=False)
    program_overall['program_rank'] = range(1, len(program_overall)+1)
    cohort_overall = overall[overall['cohort'] == student['cohort']].sort_values('trs_score', ascending=False)
    cohort_overall['cohort_rank'] = range(1, len(cohort_overall)+1)
    your_program_rank = program_overall[program_overall['student_id'] == student_id]['program_rank'].iloc[0]
    your_cohort_rank = cohort_overall[cohort_overall['student_id'] == student_id]['cohort_rank'].iloc[0]
    c1, c2 = st.columns(2)
    c1.info(f"**Your Program Rank:** {your_program_rank}/{len(program_overall)}")
    c2.info(f"**Your Cohort Rank:** {your_cohort_rank}/{len(cohort_overall)}")

    # ---- Quick Access ----
    st.markdown("##### üß† Quick Access")
    c1, c2, c3 = st.columns(3)
    with c1:
        st.markdown('<a href=" https://agent.spjain.online/chat/8Yii35qMvJ7VPxXP" target="_blank"><button style="background-color:#4CAF50; color:white; padding:10px 24px; border:none; border-radius:8px; font-size:16px;">AI Tutor</button></a>', unsafe_allow_html=True)
    with c2:
        st.markdown('<a href=" https://agent.spjain.online/chat/GKMIMxbgRSP9308S" target="_blank"><button style="background-color:#2196F3; color:white; padding:10px 24px; border:none; border-radius:8px; font-size:16px;">AI Mentor</button></a>', unsafe_allow_html=True)
    with c3:
        st.markdown('<a href=" https://agent.spjain.online/chat/GKMIMxbgRSP9308S" target="_blank"><button style="background-color:#FF9800; color:white; padding:10px 24px; border:none; border-radius:8px; font-size:16px;">AI for Exam Preparation</button></a>', unsafe_allow_html=True)


    # ---- Your Current Standing: TRS by Unit ----
    st.markdown("##### üü¢ Your Current Standing: TRS by Unit")
    trs_chart = px.bar(
        student_units,
        x='unit_name', y='trs_score',
        color='trs_score',
        color_continuous_scale=px.colors.sequential.Sunset,
        labels={'trs_score': 'Your TRS'},
        height=350
    )
    trs_chart.add_scatter(x=student_units['unit_name'], y=student_units['class_average_trs'],
                          mode='lines+markers', name='Class Avg TRS', marker=dict(color='limegreen'))
    st.plotly_chart(trs_chart, use_container_width=True)

    # ---- TRS Trend vs Class Average ----
    st.markdown("##### üîµ TRS Trend vs Class Average")
    trend_df = student_units[['unit_name', 'trs_score', 'class_average_trs']].copy()
    trend_df['unit_order'] = trend_df.index
    line_fig = px.line(
        trend_df, x='unit_order',
        y=['trs_score', 'class_average_trs'],
        color_discrete_sequence=['#e45756', '#76b7b2'],
        labels={'unit_order': 'Unit', 'value': 'TRS Score'},
        markers=True
    )
    line_fig.update_layout(
        xaxis = dict(tickvals=trend_df['unit_order'], ticktext=trend_df['unit_name'])
    )
    st.plotly_chart(line_fig, use_container_width=True)

    # ---- Strengths & Weaknesses (Aptitude & Logical Ability) ----
    st.markdown("##### üü° Strengths & Weaknesses (Aptitude & Logical Ability)")
    z = np.array([student_units['aptitude_improvement'], student_units['logical_ability_improvement']])
    heatmap = px.imshow(
        z, text_auto=True,
        labels=dict(x="Unit", y="Ability", color="Improvement"),
        x=student_units['unit_name'], y=['Aptitude', 'Logical'],
        color_continuous_scale=px.colors.sequential.Magma
    )
    st.plotly_chart(heatmap, use_container_width=True)

# -------------- FACULTY DASHBOARD --------------
elif menu == "Faculty Dashboard":
    st.header("üë®‚Äçüè´ Faculty Dashboard")
    st.markdown("**Monitor your class performance, session analytics, and student engagement**")
    faculty_id = st.selectbox(
        "Select Faculty",
        sorted(faculty_df['faculty_id'].unique()),
        format_func=lambda x: faculty_df[faculty_df['faculty_id']==x]['name'].iloc[0]
    )
    faculty = faculty_df[faculty_df['faculty_id'] == faculty_id].iloc[0]
    st.subheader(f"Faculty: {faculty['name']} ({faculty['program']})")
    my_units = faculty_df[(faculty_df['faculty_id']==faculty_id)]
    unit = st.selectbox("Unit Taught", sorted(my_units['unit_taught'].unique()))
    cohort = st.selectbox("Cohort", sorted(my_units[my_units['unit_taught']==unit]['cohort'].unique()))

    sessions = faculty_units_df[
        (faculty_units_df['faculty_id']==faculty_id) &
        (faculty_units_df['unit_taught']==unit) &
        (faculty_units_df['cohort']==cohort)
    ]
    # ---- Average Class TRS by Session (Box & Whiskers) ----
    st.markdown("##### üü© Average Class TRS by Session (Box & Whiskers Plot)")
    trs_values = []
    for _, row in sessions.iterrows():
        hist = eval(str(row['histogram_trs']))
        # Expand histogram into individual scores
        session_scores = []
        # 40-60: hist[0], 61-75: hist[1], 76-89: hist[2], 90-100: hist[3]
        session_scores += list(np.random.randint(40, 61, hist[0]))
        session_scores += list(np.random.randint(61, 76, hist[1]))
        session_scores += list(np.random.randint(76, 90, hist[2]))
        session_scores += list(np.random.randint(90, 101, hist[3]))
        for score in session_scores:
            trs_values.append({'Session': row['session_num'], 'TRS': score})
    box_df = pd.DataFrame(trs_values)
    if len(box_df):
        box_fig = px.box(
            box_df, x="Session", y="TRS",
            color="Session", points="all",
            color_discrete_sequence=px.colors.qualitative.Bold
        )
        st.plotly_chart(box_fig, use_container_width=True)
    else:
        st.warning("No data for selected combination.")

    # ---- Strengths & Weaknesses (Session-wise) ----
    st.markdown("##### üü• Strengths & Weaknesses (Session-wise)")
    session_selected = st.selectbox("Select Session for Topics", sorted(sessions['session_num'].unique()))
    session_row = sessions[sessions['session_num']==session_selected]
    if not session_row.empty:
        st.write(f"**Strong Topics:** {session_row['strong_topics'].iloc[0]}")
        st.write(f"**Weak Topics:** {session_row['weak_topics'].iloc[0]}")
    else:
        st.warning("No data for selected session.")

    # ---- List of Students at Risk (TRS < 60%) ----
    st.markdown("##### ‚ö†Ô∏è Students at Risk (TRS < 60%)")
    unit_students = student_units_df[
        (student_units_df['program'] == faculty['program']) &
        (student_units_df['cohort'] == cohort) &
        (student_units_df['unit_name'] == unit)
    ]
    risk_students = unit_students[unit_students['trs_score'] < 60]
    st.write(f"**Total at risk:** {risk_students.shape[0]}")
    st.dataframe(
        students_df[students_df['student_id'].isin(risk_students['student_id'])][['student_id', 'name', 'email']],
        use_container_width=True,
        hide_index=True
    )

    st.markdown("##### ‚ö° Session-wise At-Risk Students")
    sessionwise_risk = []
    for sess in sessions['session_num']:
        # Each student only in one row per unit per session in this synthetic structure
        risk = unit_students[(unit_students['trs_score'] < 60) & (unit_students['sessions_attended'] >= sess)]
        for s in risk['student_id']:
            sessionwise_risk.append({'session': sess, 'student_id': s})
    if sessionwise_risk:
        st.dataframe(pd.DataFrame(sessionwise_risk).drop_duplicates(), use_container_width=True)
    else:
        st.write("No students at risk session-wise.")

    # ---- Top 5 Students with High TRS ----
    st.markdown("##### üèÜ Top 5 Students (Highest TRS Score)")
    top_students = unit_students.sort_values('trs_score', ascending=False).head(5)
    top_students = pd.merge(top_students, students_df[['student_id', 'name', 'email']], on='student_id')
    st.dataframe(top_students[['student_id', 'name', 'email', 'trs_score']], use_container_width=True)

    # ---- Student List ----
    st.markdown("##### üü¶ Student List (Clickable)")
    st.dataframe(
        students_df[
            (students_df['program'] == faculty['program']) &
            (students_df['cohort'] == cohort)
        ][['student_id', 'name', 'email']],
        use_container_width=True
    )

# -------------- SENIOR MANAGEMENT DASHBOARD --------------
elif menu == "Senior Management Dashboard":
    st.header("üèõÔ∏è Senior Management Dashboard")
    st.markdown("**High-level snapshot of program, unit, and cohort performance & AI impact**")

    # 1. Total Units in which AI Tutor is Implemented (Program-wise)
    st.markdown("##### üìä Total Units in which AI Tutor is Implemented (Program-wise)")
    total_units_prog = management_df.groupby('program')['unit_name'].nunique().reset_index().rename(columns={'unit_name': 'Units Implemented'})
    st.dataframe(total_units_prog, use_container_width=True)

    # 2. Key Insights
    st.markdown("##### ‚≠ê Key Insights")
    highest_trs = management_df.loc[management_df['average_trs'].idxmax()]
    lowest_trs = management_df.loc[management_df['average_trs'].idxmin()]
    overall_adoption = management_df['adoption_rate'].mean()
    st.success(
        f"Highest Avg TRS: {highest_trs['average_trs']:.2f} in '{highest_trs['unit_name']}' ({highest_trs['program']}, {highest_trs['cohort']})"
    )
    st.error(
        f"Lowest Avg TRS: {lowest_trs['average_trs']:.2f} in '{lowest_trs['unit_name']}' ({lowest_trs['program']}, {lowest_trs['cohort']})"
    )
    st.info(
        f"Overall AI Tutor Adoption Rate: {100 * overall_adoption:.1f}%"
    )

    # 3. Top 5 and Bottom 5 Units by Avg TRS Score (per Program)
    st.markdown("##### üèÖ Top 5 and Bottom 5 Units by Avg TRS Score (per Program)")
    selected_program = st.selectbox("Select Program for Top/Bottom Units", sorted(management_df['program'].unique()))
    filtered_prog_df = management_df[management_df['program'] == selected_program]
    top5_trs = filtered_prog_df.sort_values('average_trs', ascending=False).head(5)
    bottom5_trs = filtered_prog_df.sort_values('average_trs', ascending=True).head(5)
    col1, col2 = st.columns(2)
    with col1:
        st.write("**Top 5 Units (Avg TRS):**")
        st.dataframe(top5_trs[['unit_name', 'cohort', 'average_trs']], use_container_width=True)
    with col2:
        st.write("**Bottom 5 Units (Avg TRS):**")
        st.dataframe(bottom5_trs[['unit_name', 'cohort', 'average_trs']], use_container_width=True)

    # 4. TRS Distribution Across Units (Box & Whiskers, by Program & Cohort)
    st.markdown("##### üü© TRS Distribution Across Units (Box & Whiskers, by Program & Cohort)")
    col_p1, col_p2 = st.columns([1,2])
    with col_p1:
        filter_prog = st.selectbox(
            "Select Program (for TRS Distribution)", 
            sorted(student_units_df['program'].unique()),
            key="trs_dist_prog"
        )
        filter_cohort = st.selectbox(
            "Select Cohort (for TRS Distribution)", 
            sorted(student_units_df[student_units_df['program']==filter_prog]['cohort'].unique()),
            key="trs_dist_cohort"
        )
    filtered_trs = student_units_df[
        (student_units_df['program'] == filter_prog) &
        (student_units_df['cohort'] == filter_cohort)
    ]
    box_fig = px.box(
        filtered_trs, x='unit_name', y='trs_score', color='unit_name',
        points='outliers',  
        labels={'trs_score':'TRS Score', 'unit_name':'Unit'},
        color_discrete_sequence=px.colors.qualitative.Set3
    )
    st.plotly_chart(box_fig, use_container_width=True)

    # 5-7. Filter for Avg TRS, Adoption, Impact
    selected_program_2 = st.selectbox(
        "Select Program for Avg TRS, Adoption & Impact",
        sorted(management_df['program'].unique()),
        key='prog_filter_2'
    )
    filtered_df2 = management_df[management_df['program'] == selected_program_2]

    # 5. Average TRS by Program, Cohort, Unit
    st.markdown("##### üü´ Average TRS by Program, Cohort, Unit")
    avg_trs_fig = px.bar(
        filtered_df2, x='unit_name', y='average_trs', color='cohort',
        barmode='group', labels={'average_trs':'Average TRS'},
        color_discrete_sequence=px.colors.qualitative.Vivid
    )
    st.plotly_chart(avg_trs_fig, use_container_width=True)

    # 6. AI Tutor Adoption Rates by Unit
    st.markdown("##### üü™ AI Tutor Adoption Rates by Unit")
    adoption_fig = px.bar(
        filtered_df2, x='unit_name', y='adoption_rate', color='cohort',
        barmode='group', labels={'adoption_rate': 'Adoption Rate'},
        color_discrete_sequence=px.colors.qualitative.Prism
    )
    st.plotly_chart(adoption_fig, use_container_width=True)

    # 7. AI Tutor Impact (Before/After)
    st.markdown("##### üüß AI Tutor Impact (Before/After)")
    impact_fig = px.bar(
        filtered_df2, x='unit_name', y=['before_ai_tutor', 'after_ai_tutor'],
        color_discrete_sequence=['#CCCCCC', '#2ca02c'],
        labels={'value': 'Avg Score', 'unit_name': 'Unit'},
        barmode='group'
    )
    st.plotly_chart(impact_fig, use_container_width=True)

    # 8. TRS Distribution Across All Units (Averages)
    st.markdown("##### üì¶ TRS Distribution Across All Units (Averages)")
    box_all_fig = px.box(
        management_df, x='unit_name', y='average_trs', color='program',
        points='all', labels={'average_trs':'Avg TRS', 'unit_name':'Unit'},
        color_discrete_sequence=px.colors.qualitative.Set2
    )
    st.plotly_chart(box_all_fig, use_container_width=True)

    # 9. Faculty Wise Records
    st.markdown("##### üë©‚Äçüè´ Faculty Wise Records")
    sel_faculty_id = st.selectbox(
        "Select Faculty", 
        sorted(faculty_df['faculty_id'].unique()), 
        format_func=lambda x: faculty_df[faculty_df['faculty_id']==x]['name'].iloc[0]
    )
    fac_units = faculty_units_df[faculty_units_df['faculty_id']==sel_faculty_id]
    if len(fac_units):
        fac_trs_chart = px.bar(
            fac_units, x='unit_taught', y='average_class_trs', color='cohort',
            barmode='group', labels={'average_class_trs':'Avg Class TRS'},
            color_discrete_sequence=px.colors.qualitative.Pastel
        )
        st.plotly_chart(fac_trs_chart, use_container_width=True)
        st.dataframe(fac_units[['unit_taught', 'cohort', 'average_class_trs', 'num_students_using']], use_container_width=True)
    else:
        st.info("No data for selected faculty.")

    # 10. Export
    st.markdown("##### üì• Export Data")
    st.download_button(
        label="Download Full Management Dataset (CSV)",
        data=management_df.to_csv(index=False),
        file_name="ai_tutor_management_snapshot.csv",
        mime="text/csv"
    )


st.markdown("---")
st.markdown("Powered by [SP Jain School of Global Management] | AI Tutor Analytics Platform")
